stages:
- stage: Build
  jobs:
  - job: BuildLambdaFunction
    pool:
      vmImage: 'ubuntu-latest'
    continueOnError: false
    steps:
      - task: NodeTool@0
        inputs:
          versionSpec: '12.x'
        displayName: 'Install Node.js'
      - script: |
          npm install
          npm test
        displayName: 'NPM install and test'
      - task: ArchiveFiles@2
        inputs:
          rootFolderOrFile: '$(Build.SourcesDirectory)'
          includeRootFolder: true
          archiveType: 'zip'
          archiveFile: '$(Build.ArtifactStagingDirectory)/build.zip'
          replaceExistingArchive: true
          verbose: true
      - task: PublishPipelineArtifact@1
        inputs:
          targetPath: '$(Pipeline.Workspace)'
          artifact: 'build.zip'
          publishLocation: 'pipeline'
- stage: DevelopmentDeployment
  dependsOn: Build
  jobs:
  - deployment: LambdaDevelopment
    pool:
      vmImage: 'ubuntu-latest'
    environment: 'Development'
    strategy:
      runOnce:
        deploy:
          steps:
          - script: |
              sudo apt-get install awscli
              aws configure set aws_access_key_id $(AWS_ACCESS_KEY_ID)
              aws configure set aws_secret_access_key $(AWS_SECRET_KEY_ID)
              aws configure set aws_default_region $(AWS_DEFAULT_REGION)
            displayName: 'install and configure AWS CLI'
          - script: |
              aws s3 cp $(Build.SourcesDirectory)/cloudformation-stack.json s3://azdo-staging-s3-bucket
              aws s3 cp $(Pipeline.Workspace)/build.zip s3://azdo-staging-s3-bucket
            displayName: 'upload CloudFormation template and Lambda function ZIP build to staging bucket'
          - script: |
              aws cloudformation deploy --stack-name $(AWS_STACK_NAME) --template-file $(AWS_CLOUDFORMATION_TEMPLATE_FILE_PATH) --capabilities CAPABILITY_NAMED_IAM --no-fail-on-empty-changeset
            displayName: 'updating CloudFormation stack'